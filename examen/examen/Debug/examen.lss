
examen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c0  00000000  00000000  00000114  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000c0  00000268  2**0
                  ALLOC
  2 .bss          00000001  00800060  00800060  00000378  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000003a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008e4  00000000  00000000  000003e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000574  00000000  00000000  00000ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000320  00000000  00000000  0000123f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c4  00000000  00000000  00001560  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001af  00000000  00000000  00001624  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000013e  00000000  00000000  000017d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001911  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000025e  0000025e  00000372  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001944  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    0000002c  00000216  00000216  0000032a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_1 00000060  000001b6  000001b6  000002ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_19 00000094  000000c0  000000c0  000001d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__vector_2 0000001c  00000242  00000242  00000356  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__vector_3 00000062  00000154  00000154  00000268  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .bss.valores  00000003  00800061  00800061  00000378  2**0
                  ALLOC
 20 .bss.count_int 00000001  00800064  00800064  00000378  2**0
                  ALLOC
 21 .bss.count    00000001  00800065  00800065  00000378  2**0
                  ALLOC
 22 .data.f_read  00000001  00800066  00000262  00000376  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 23 .bss.i        00000001  00800067  00800067  00000378  2**0
                  ALLOC
 24 .data.codigo_barrido 00000001  00800068  00000263  00000377  2**0
                  CONTENTS, ALLOC, LOAD, DATA

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__vector_1>
   8:	0c 94 21 01 	jmp	0x242	; 0x242 <__vector_2>
   c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__vector_3>
  10:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  14:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  18:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  1c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  20:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  24:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  28:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  2c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  30:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  34:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  38:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  3c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  40:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  44:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  48:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <_etext>
  50:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 66       	ori	r16, 0x60	; 96
  58:	80 00       	.word	0x0080	; ????
  5a:	66 00       	.word	0x0066	; ????
  5c:	67 00       	.word	0x0067	; ????
  5e:	02 62       	ori	r16, 0x22	; 34
  60:	00 67       	ori	r16, 0x70	; 112
  62:	00 68       	ori	r16, 0x80	; 128
  64:	80 00       	.word	0x0080	; ????
  66:	68 00       	.word	0x0068	; ????
  68:	69 00       	.word	0x0069	; ????
  6a:	02 63       	ori	r16, 0x32	; 50

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf e5       	ldi	r28, 0x5F	; 95
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
  78:	e4 e5       	ldi	r30, 0x54	; 84
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	40 e0       	ldi	r20, 0x00	; 0
  7e:	17 c0       	rjmp	.+46     	; 0xae <__do_clear_bss+0x8>
  80:	b5 91       	lpm	r27, Z+
  82:	a5 91       	lpm	r26, Z+
  84:	35 91       	lpm	r19, Z+
  86:	25 91       	lpm	r18, Z+
  88:	05 91       	lpm	r16, Z+
  8a:	07 fd       	sbrc	r16, 7
  8c:	0c c0       	rjmp	.+24     	; 0xa6 <__do_clear_bss>
  8e:	95 91       	lpm	r25, Z+
  90:	85 91       	lpm	r24, Z+
  92:	ef 01       	movw	r28, r30
  94:	f9 2f       	mov	r31, r25
  96:	e8 2f       	mov	r30, r24
  98:	05 90       	lpm	r0, Z+
  9a:	0d 92       	st	X+, r0
  9c:	a2 17       	cp	r26, r18
  9e:	b3 07       	cpc	r27, r19
  a0:	d9 f7       	brne	.-10     	; 0x98 <__do_copy_data+0x20>
  a2:	fe 01       	movw	r30, r28
  a4:	04 c0       	rjmp	.+8      	; 0xae <__do_clear_bss+0x8>

000000a6 <__do_clear_bss>:
  a6:	1d 92       	st	X+, r1
  a8:	a2 17       	cp	r26, r18
  aa:	b3 07       	cpc	r27, r19
  ac:	e1 f7       	brne	.-8      	; 0xa6 <__do_clear_bss>
  ae:	ec 36       	cpi	r30, 0x6C	; 108
  b0:	f4 07       	cpc	r31, r20
  b2:	31 f7       	brne	.-52     	; 0x80 <__do_copy_data+0x8>
  b4:	0e 94 0b 01 	call	0x216	; 0x216 <main>
  b8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_exit>

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>

Disassembly of section .text:

0000025e <__bad_interrupt>:
 25e:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

00000216 <main>:
ISR(TIMER0_COMP_vect);						// RFID read (TIMER0)
ISR(TIMER2_COMP_vect);						// 7 segment display (TIMER2)

int main(void){
	/*------ Port set up ------*/ 
	DDRD |= (0 << PD2);						// Switch pin
 216:	81 b3       	in	r24, 0x11	; 17
 218:	81 bb       	out	0x11, r24	; 17
	DDRD |= (0 << PD3);						// Optical sensor pin
 21a:	81 b3       	in	r24, 0x11	; 17
 21c:	81 bb       	out	0x11, r24	; 17
	DDRA = 0b00000000;						// RFID pin
 21e:	1a ba       	out	0x1a, r1	; 26
	
	DDRD |= (1 << PD4);						// Heater port (PWM = 0C1B)
 220:	81 b3       	in	r24, 0x11	; 17
 222:	80 61       	ori	r24, 0x10	; 16
 224:	81 bb       	out	0x11, r24	; 17
	DDRB |= (1 << PB0);						// Electro valve port
 226:	87 b3       	in	r24, 0x17	; 23
 228:	81 60       	ori	r24, 0x01	; 1
 22a:	87 bb       	out	0x17, r24	; 23
	DDRC |= 0b11111111;						// 7 segments display port
 22c:	84 b3       	in	r24, 0x14	; 20
 22e:	8f ef       	ldi	r24, 0xFF	; 255
 230:	84 bb       	out	0x14, r24	; 20
	
	/*------ Control word ------*/
	// External interrupts
	GICR = (1 << INT0) | (1 << INT1);
 232:	80 ec       	ldi	r24, 0xC0	; 192
 234:	8b bf       	out	0x3b, r24	; 59
	MCUCR = (1 << ISC00) | (1 << ISC11);
 236:	89 e0       	ldi	r24, 0x09	; 9
 238:	85 bf       	out	0x35, r24	; 53
	
	// Timers interrupts
	TIMSK = (1 << OCIE0) | (1 << OCIE2);
 23a:	82 e8       	ldi	r24, 0x82	; 130
 23c:	89 bf       	out	0x39, r24	; 57
	
	sei();
 23e:	78 94       	sei
 240:	ff cf       	rjmp	.-2      	; 0x240 <main+0x2a>

Disassembly of section .text.__vector_1:

000001b6 <__vector_1>:
		
    while(1);
}

ISR(INT0_vect){
 1b6:	1f 92       	push	r1
 1b8:	0f 92       	push	r0
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	0f 92       	push	r0
 1be:	11 24       	eor	r1, r1
 1c0:	8f 93       	push	r24
 1c2:	9f 93       	push	r25
	if(f_read == 1){
 1c4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <f_read>
 1c8:	81 30       	cpi	r24, 0x01	; 1
 1ca:	b9 f4       	brne	.+46     	; 0x1fa <__vector_1+0x44>
		OCR0 = 196;
 1cc:	84 ec       	ldi	r24, 0xC4	; 196
 1ce:	8c bf       	out	0x3c, r24	; 60
		TCCR0 = (1 << WGM01) | (1 << CS02) | (1 << CS00);						//Initialize 25ms Timer
 1d0:	8d e0       	ldi	r24, 0x0D	; 13
 1d2:	83 bf       	out	0x33, r24	; 51

		OCR1A = 781;
 1d4:	8d e0       	ldi	r24, 0x0D	; 13
 1d6:	93 e0       	ldi	r25, 0x03	; 3
 1d8:	9b bd       	out	0x2b, r25	; 43
 1da:	8a bd       	out	0x2a, r24	; 42
		OCR1B = 0;
 1dc:	19 bc       	out	0x29, r1	; 41
 1de:	18 bc       	out	0x28, r1	; 40
		TCCR1A |= (1 << COM1B1) | (1 << WGM11) |(1 << WGM10);					//Initialize PWM
 1e0:	8f b5       	in	r24, 0x2f	; 47
 1e2:	83 62       	ori	r24, 0x23	; 35
 1e4:	8f bd       	out	0x2f, r24	; 47
		TCCR1B |= (1 << WGM13) | (1 << WGM12) | (1 << CS12) | (1 << CS10);						//Initialize PWM
 1e6:	8e b5       	in	r24, 0x2e	; 46
 1e8:	8d 61       	ori	r24, 0x1D	; 29
 1ea:	8e bd       	out	0x2e, r24	; 46
		
		OCR2 = 39;
 1ec:	87 e2       	ldi	r24, 0x27	; 39
 1ee:	83 bd       	out	0x23, r24	; 35
		TCCR2 = (1 << WGM21) | (1 << CS22) | (1 << CS21) | (1 << CS20);
 1f0:	8f e0       	ldi	r24, 0x0F	; 15
 1f2:	85 bd       	out	0x25, r24	; 37
		f_read = 0;
 1f4:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <f_read>
 1f8:	07 c0       	rjmp	.+14     	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
	} else{
		TCCR0 = 0;								// Turn off 100ms Timer
 1fa:	13 be       	out	0x33, r1	; 51
		
		TCCR1A = 0;								// Stop PWM
 1fc:	1f bc       	out	0x2f, r1	; 47
		TCCR1B = 0;								// Stop PWM
 1fe:	1e bc       	out	0x2e, r1	; 46
		
		TCCR2 = 0;
 200:	15 bc       	out	0x25, r1	; 37
		f_read = 1;
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <f_read>
	}	
}
 208:	9f 91       	pop	r25
 20a:	8f 91       	pop	r24
 20c:	0f 90       	pop	r0
 20e:	0f be       	out	0x3f, r0	; 63
 210:	0f 90       	pop	r0
 212:	1f 90       	pop	r1
 214:	18 95       	reti

Disassembly of section .text.__vector_19:

000000c0 <__vector_19>:

ISR(TIMER0_COMP_vect){
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
  ce:	ef 93       	push	r30
  d0:	ff 93       	push	r31
	if(count_int == 3){
  d2:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <count_int>
  d6:	83 30       	cpi	r24, 0x03	; 3
  d8:	89 f5       	brne	.+98     	; 0x13c <__vector_19+0x7c>
		count_int = 0;		
  da:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <count_int>
		valores[count] = PINA;
  de:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <count>
  e2:	e8 2f       	mov	r30, r24
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	99 b3       	in	r25, 0x19	; 25
  e8:	ef 59       	subi	r30, 0x9F	; 159
  ea:	ff 4f       	sbci	r31, 0xFF	; 255
  ec:	90 83       	st	Z, r25
		if(count == 0){
  ee:	81 11       	cpse	r24, r1
  f0:	04 c0       	rjmp	.+8      	; 0xfa <__vector_19+0x3a>
			count++;
  f2:	8f 5f       	subi	r24, 0xFF	; 255
  f4:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <count>
  f8:	24 c0       	rjmp	.+72     	; 0x142 <__vector_19+0x82>
		} else if(count == 1){
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	89 f4       	brne	.+34     	; 0x120 <__vector_19+0x60>
			if(valores[count] < temperatura){
  fe:	94 30       	cpi	r25, 0x04	; 4
 100:	28 f4       	brcc	.+10     	; 0x10c <__vector_19+0x4c>
				OCR1B = 586;							// 75% PWM
 102:	8a e4       	ldi	r24, 0x4A	; 74
 104:	92 e0       	ldi	r25, 0x02	; 2
 106:	99 bd       	out	0x29, r25	; 41
 108:	88 bd       	out	0x28, r24	; 40
 10a:	04 c0       	rjmp	.+8      	; 0x114 <__vector_19+0x54>
			} else{
				OCR1B = 195;							// 25% PWM
 10c:	83 ec       	ldi	r24, 0xC3	; 195
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	99 bd       	out	0x29, r25	; 41
 112:	88 bd       	out	0x28, r24	; 40
			}
			count++;
 114:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <count>
 118:	8f 5f       	subi	r24, 0xFF	; 255
 11a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <count>
 11e:	11 c0       	rjmp	.+34     	; 0x142 <__vector_19+0x82>
		} else if(count == 2){
 120:	82 30       	cpi	r24, 0x02	; 2
 122:	79 f4       	brne	.+30     	; 0x142 <__vector_19+0x82>
			if(valores[count] < 3){
 124:	93 30       	cpi	r25, 0x03	; 3
 126:	20 f4       	brcc	.+8      	; 0x130 <__vector_19+0x70>
				PORTB |= (1 << PB0);
 128:	88 b3       	in	r24, 0x18	; 24
 12a:	81 60       	ori	r24, 0x01	; 1
 12c:	88 bb       	out	0x18, r24	; 24
 12e:	03 c0       	rjmp	.+6      	; 0x136 <__vector_19+0x76>
			} else{
				PORTB &= ~(1 << PB0);
 130:	88 b3       	in	r24, 0x18	; 24
 132:	8e 7f       	andi	r24, 0xFE	; 254
 134:	88 bb       	out	0x18, r24	; 24
			}
			count = 0;
 136:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <count>
 13a:	03 c0       	rjmp	.+6      	; 0x142 <__vector_19+0x82>
		}
	} else{
		count_int++;
 13c:	8f 5f       	subi	r24, 0xFF	; 255
 13e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <count_int>
	}	 
}
 142:	ff 91       	pop	r31
 144:	ef 91       	pop	r30
 146:	9f 91       	pop	r25
 148:	8f 91       	pop	r24
 14a:	0f 90       	pop	r0
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	0f 90       	pop	r0
 150:	1f 90       	pop	r1
 152:	18 95       	reti

Disassembly of section .text.__vector_2:

00000242 <__vector_2>:

ISR(INT1_vect){
 242:	1f 92       	push	r1
 244:	0f 92       	push	r0
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	0f 92       	push	r0
 24a:	11 24       	eor	r1, r1
	TCCR0 = 0;										// Turn down 100ms Timer
 24c:	13 be       	out	0x33, r1	; 51
	TCCR1A = 0;										// Stop PWM
 24e:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0;
 250:	1e bc       	out	0x2e, r1	; 46
	TCCR2 = 0;
 252:	15 bc       	out	0x25, r1	; 37
}
 254:	0f 90       	pop	r0
 256:	0f be       	out	0x3f, r0	; 63
 258:	0f 90       	pop	r0
 25a:	1f 90       	pop	r1
 25c:	18 95       	reti

Disassembly of section .text.__vector_3:

00000154 <__vector_3>:

ISR(TIMER2_COMP_vect){
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	8f 93       	push	r24
 160:	9f 93       	push	r25
 162:	ef 93       	push	r30
 164:	ff 93       	push	r31
	selector = codigo_barrido & 0xF0;				// 0-Mask to 4 LSB
 166:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <codigo_barrido>
 16a:	80 7f       	andi	r24, 0xF0	; 240
 16c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	PORTC = selector + valores[i++];				// Selector + value to 7 segments
 170:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <i>
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	9e 0f       	add	r25, r30
 178:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <i>
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	ef 59       	subi	r30, 0x9F	; 159
 180:	ff 4f       	sbci	r31, 0xFF	; 255
 182:	90 81       	ld	r25, Z
 184:	89 0f       	add	r24, r25
 186:	85 bb       	out	0x15, r24	; 21
	codigo_barrido = (codigo_barrido << 1);			// Shift left (next digit)
 188:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <codigo_barrido>
 18c:	88 0f       	add	r24, r24
 18e:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <codigo_barrido>
	if(i > 2){
 192:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <i>
 196:	83 30       	cpi	r24, 0x03	; 3
 198:	28 f0       	brcs	.+10     	; 0x1a4 <__vector_3+0x50>
		i = 0;
 19a:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <i>
		codigo_barrido = 0b11011111;
 19e:	8f ed       	ldi	r24, 0xDF	; 223
 1a0:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <codigo_barrido>
	}
 1a4:	ff 91       	pop	r31
 1a6:	ef 91       	pop	r30
 1a8:	9f 91       	pop	r25
 1aa:	8f 91       	pop	r24
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti
