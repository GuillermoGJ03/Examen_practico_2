
examen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c0  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000346  2**0
                  ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000346  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000346  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000375  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008fd  00000000  00000000  000003b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000574  00000000  00000000  00000cb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000326  00000000  00000000  00001226  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c4  00000000  00000000  0000154c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001af  00000000  00000000  00001610  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000013e  00000000  00000000  000017bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000018fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000026c  0000026c  00000340  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001930  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    0000002c  00000224  00000224  000002f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_1 00000056  000001ce  000001ce  000002a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_19 000000ac  000000c0  000000c0  00000194  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__vector_2 0000001c  00000250  00000250  00000324  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__vector_3 00000062  0000016c  0000016c  00000240  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .bss.valores  00000004  00800061  00800061  00000346  2**0
                  ALLOC
 20 .bss.count_int 00000001  00800065  00800065  00000346  2**0
                  ALLOC
 21 .bss.count    00000001  00800066  00800066  00000346  2**0
                  ALLOC
 22 .data.f_read  00000001  00800067  00000270  00000344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 23 .bss.i        00000001  00800068  00800068  00000346  2**0
                  ALLOC
 24 .data.codigo_barrido 00000001  00800069  00000271  00000345  2**0
                  CONTENTS, ALLOC, LOAD, DATA

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__vector_1>
   8:	0c 94 28 01 	jmp	0x250	; 0x250 <__vector_2>
   c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__vector_3>
  10:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  14:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  18:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  1c:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  20:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  24:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  28:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  2c:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  30:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  34:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  38:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  3c:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  40:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  44:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  48:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <_etext>
  50:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 67       	ori	r16, 0x70	; 112
  58:	80 00       	.word	0x0080	; ????
  5a:	67 00       	.word	0x0067	; ????
  5c:	68 00       	.word	0x0068	; ????
  5e:	02 70       	andi	r16, 0x02	; 2
  60:	00 68       	ori	r16, 0x80	; 128
  62:	00 69       	ori	r16, 0x90	; 144
  64:	80 00       	.word	0x0080	; ????
  66:	69 00       	.word	0x0069	; ????
  68:	6a 00       	.word	0x006a	; ????
  6a:	02 71       	andi	r16, 0x12	; 18

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf e5       	ldi	r28, 0x5F	; 95
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
  78:	e4 e5       	ldi	r30, 0x54	; 84
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	40 e0       	ldi	r20, 0x00	; 0
  7e:	17 c0       	rjmp	.+46     	; 0xae <__do_clear_bss+0x8>
  80:	b5 91       	lpm	r27, Z+
  82:	a5 91       	lpm	r26, Z+
  84:	35 91       	lpm	r19, Z+
  86:	25 91       	lpm	r18, Z+
  88:	05 91       	lpm	r16, Z+
  8a:	07 fd       	sbrc	r16, 7
  8c:	0c c0       	rjmp	.+24     	; 0xa6 <__do_clear_bss>
  8e:	95 91       	lpm	r25, Z+
  90:	85 91       	lpm	r24, Z+
  92:	ef 01       	movw	r28, r30
  94:	f9 2f       	mov	r31, r25
  96:	e8 2f       	mov	r30, r24
  98:	05 90       	lpm	r0, Z+
  9a:	0d 92       	st	X+, r0
  9c:	a2 17       	cp	r26, r18
  9e:	b3 07       	cpc	r27, r19
  a0:	d9 f7       	brne	.-10     	; 0x98 <__do_copy_data+0x20>
  a2:	fe 01       	movw	r30, r28
  a4:	04 c0       	rjmp	.+8      	; 0xae <__do_clear_bss+0x8>

000000a6 <__do_clear_bss>:
  a6:	1d 92       	st	X+, r1
  a8:	a2 17       	cp	r26, r18
  aa:	b3 07       	cpc	r27, r19
  ac:	e1 f7       	brne	.-8      	; 0xa6 <__do_clear_bss>
  ae:	ec 36       	cpi	r30, 0x6C	; 108
  b0:	f4 07       	cpc	r31, r20
  b2:	31 f7       	brne	.-52     	; 0x80 <__do_copy_data+0x8>
  b4:	0e 94 12 01 	call	0x224	; 0x224 <main>
  b8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_exit>

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>

Disassembly of section .text:

0000026c <__bad_interrupt>:
 26c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.main:

00000224 <main>:

void lectura();

int main(void){
	/*------ Port set up ------*/ 
	DDRD |= (0 << PD2);						// Switch pin
 224:	81 b3       	in	r24, 0x11	; 17
 226:	81 bb       	out	0x11, r24	; 17
	DDRD |= (0 << PD3);						// Optical sensor pin
 228:	81 b3       	in	r24, 0x11	; 17
 22a:	81 bb       	out	0x11, r24	; 17
	DDRA = 0b00000000;						// RFID pin
 22c:	1a ba       	out	0x1a, r1	; 26
	
	DDRD |= (1 << PD4);						// Heater port (PWM = 0C1B)
 22e:	81 b3       	in	r24, 0x11	; 17
 230:	80 61       	ori	r24, 0x10	; 16
 232:	81 bb       	out	0x11, r24	; 17
	DDRB |= (1 << PB0);						// Electro valve port
 234:	87 b3       	in	r24, 0x17	; 23
 236:	81 60       	ori	r24, 0x01	; 1
 238:	87 bb       	out	0x17, r24	; 23
	DDRC |= 0b11111111;						// 7 segments display port
 23a:	84 b3       	in	r24, 0x14	; 20
 23c:	8f ef       	ldi	r24, 0xFF	; 255
 23e:	84 bb       	out	0x14, r24	; 20
	
	/*------ Control word ------*/
	// External interrupts
	GICR = (1 << INT0) | (1 << INT1);
 240:	80 ec       	ldi	r24, 0xC0	; 192
 242:	8b bf       	out	0x3b, r24	; 59
	MCUCR = (1 << ISC00) | (1 << ISC11);
 244:	89 e0       	ldi	r24, 0x09	; 9
 246:	85 bf       	out	0x35, r24	; 53
	
	// Timers interrupts
	TIMSK = (1 << OCIE0) | (1 << OCIE2);
 248:	82 e8       	ldi	r24, 0x82	; 130
 24a:	89 bf       	out	0x39, r24	; 57
	
	sei();
 24c:	78 94       	sei
 24e:	ff cf       	rjmp	.-2      	; 0x24e <main+0x2a>

Disassembly of section .text.__vector_1:

000001ce <__vector_1>:
		
    while(1);
}

ISR(INT0_vect){
 1ce:	1f 92       	push	r1
 1d0:	0f 92       	push	r0
 1d2:	0f b6       	in	r0, 0x3f	; 63
 1d4:	0f 92       	push	r0
 1d6:	11 24       	eor	r1, r1
 1d8:	8f 93       	push	r24
 1da:	9f 93       	push	r25
	if(f_read == 1){
 1dc:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <f_read>
 1e0:	81 30       	cpi	r24, 0x01	; 1
 1e2:	91 f4       	brne	.+36     	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
		OCR0 = 196;
 1e4:	84 ec       	ldi	r24, 0xC4	; 196
 1e6:	8c bf       	out	0x3c, r24	; 60
		TCCR0 = (1 << WGM01) | (1 << CS02) | (1 << CS00);						//Initialize 25ms Timer
 1e8:	8d e0       	ldi	r24, 0x0D	; 13
 1ea:	83 bf       	out	0x33, r24	; 51

		OCR1A = 0;
 1ec:	1b bc       	out	0x2b, r1	; 43
 1ee:	1a bc       	out	0x2a, r1	; 42
		OCR1B = 0;
 1f0:	19 bc       	out	0x29, r1	; 41
 1f2:	18 bc       	out	0x28, r1	; 40
		TCCR1A = (1 << COM1B1) | (1 << WGM11) |(1 << WGM10);					//Initialize PWM
 1f4:	93 e2       	ldi	r25, 0x23	; 35
 1f6:	9f bd       	out	0x2f, r25	; 47
		TCCR1B = (1 << WGM12) | (1 << CS12) | (1 << CS10);						//Initialize PWM
 1f8:	8e bd       	out	0x2e, r24	; 46
		
		OCR2 = 39;
 1fa:	87 e2       	ldi	r24, 0x27	; 39
 1fc:	83 bd       	out	0x23, r24	; 35
		TCCR2 = (1 << WGM21) | (1 << CS22) | (1 << CS21) | (1 << CS20);
 1fe:	8f e0       	ldi	r24, 0x0F	; 15
 200:	85 bd       	out	0x25, r24	; 37
		f_read = 0;
 202:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <f_read>
 206:	07 c0       	rjmp	.+14     	; 0x216 <__EEPROM_REGION_LENGTH__+0x16>
	} else{
		TCCR0 = 0;								// Turn off 100ms Timer
 208:	13 be       	out	0x33, r1	; 51
		
		TCCR1A = 0;								// Stop PWM
 20a:	1f bc       	out	0x2f, r1	; 47
		TCCR1B = 0;								// Stop PWM
 20c:	1e bc       	out	0x2e, r1	; 46
		
		TCCR2 = 0;
 20e:	15 bc       	out	0x25, r1	; 37
		f_read = 1;
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <f_read>
	}	
}
 216:	9f 91       	pop	r25
 218:	8f 91       	pop	r24
 21a:	0f 90       	pop	r0
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	0f 90       	pop	r0
 220:	1f 90       	pop	r1
 222:	18 95       	reti

Disassembly of section .text.__vector_19:

000000c0 <__vector_19>:

ISR(TIMER0_COMP_vect){
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
  ce:	ef 93       	push	r30
  d0:	ff 93       	push	r31
	if(count_int == 3){
  d2:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <count_int>
  d6:	83 30       	cpi	r24, 0x03	; 3
  d8:	e9 f5       	brne	.+122    	; 0x154 <__vector_19+0x94>
		count_int = 0;		
  da:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <count_int>
		valores[count] = PINA;
  de:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <count>
  e2:	e8 2f       	mov	r30, r24
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	99 b3       	in	r25, 0x19	; 25
  e8:	ef 59       	subi	r30, 0x9F	; 159
  ea:	ff 4f       	sbci	r31, 0xFF	; 255
  ec:	90 83       	st	Z, r25
		if(count == 0){
  ee:	81 11       	cpse	r24, r1
  f0:	0f c0       	rjmp	.+30     	; 0x110 <__vector_19+0x50>
			if(valores[count] < 3){
  f2:	93 30       	cpi	r25, 0x03	; 3
  f4:	20 f4       	brcc	.+8      	; 0xfe <__vector_19+0x3e>
				PORTB |= (1 << PB0);
  f6:	88 b3       	in	r24, 0x18	; 24
  f8:	81 60       	ori	r24, 0x01	; 1
  fa:	88 bb       	out	0x18, r24	; 24
  fc:	03 c0       	rjmp	.+6      	; 0x104 <__vector_19+0x44>
			} else{
				PORTB &= ~(1 << PB0);
  fe:	88 b3       	in	r24, 0x18	; 24
 100:	8e 7f       	andi	r24, 0xFE	; 254
 102:	88 bb       	out	0x18, r24	; 24
			}
			count++;
 104:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <count>
 108:	8f 5f       	subi	r24, 0xFF	; 255
 10a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <count>
 10e:	25 c0       	rjmp	.+74     	; 0x15a <__vector_19+0x9a>
		} else if(count == 1){
 110:	81 30       	cpi	r24, 0x01	; 1
 112:	d9 f4       	brne	.+54     	; 0x14a <__vector_19+0x8a>
			OCR1A = 781;
 114:	8d e0       	ldi	r24, 0x0D	; 13
 116:	93 e0       	ldi	r25, 0x03	; 3
 118:	9b bd       	out	0x2b, r25	; 43
 11a:	8a bd       	out	0x2a, r24	; 42
			if(valores[count] < temperatura){
 11c:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <count>
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	ef 59       	subi	r30, 0x9F	; 159
 124:	ff 4f       	sbci	r31, 0xFF	; 255
 126:	80 81       	ld	r24, Z
 128:	82 33       	cpi	r24, 0x32	; 50
 12a:	28 f4       	brcc	.+10     	; 0x136 <__vector_19+0x76>
				OCR1B = 586;							// 75% PWM
 12c:	8a e4       	ldi	r24, 0x4A	; 74
 12e:	92 e0       	ldi	r25, 0x02	; 2
 130:	99 bd       	out	0x29, r25	; 41
 132:	88 bd       	out	0x28, r24	; 40
 134:	04 c0       	rjmp	.+8      	; 0x13e <__vector_19+0x7e>
			} else{
				OCR1B = 195;							// 25% PWM
 136:	83 ec       	ldi	r24, 0xC3	; 195
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	99 bd       	out	0x29, r25	; 41
 13c:	88 bd       	out	0x28, r24	; 40
			}
			count++;
 13e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <count>
 142:	8f 5f       	subi	r24, 0xFF	; 255
 144:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <count>
 148:	08 c0       	rjmp	.+16     	; 0x15a <__vector_19+0x9a>
		} else if(count == 2){
 14a:	82 30       	cpi	r24, 0x02	; 2
 14c:	31 f4       	brne	.+12     	; 0x15a <__vector_19+0x9a>
			count = 0;
 14e:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <count>
 152:	03 c0       	rjmp	.+6      	; 0x15a <__vector_19+0x9a>
		}
	} else{
		count_int++;
 154:	8f 5f       	subi	r24, 0xFF	; 255
 156:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <count_int>
	}	 
}
 15a:	ff 91       	pop	r31
 15c:	ef 91       	pop	r30
 15e:	9f 91       	pop	r25
 160:	8f 91       	pop	r24
 162:	0f 90       	pop	r0
 164:	0f be       	out	0x3f, r0	; 63
 166:	0f 90       	pop	r0
 168:	1f 90       	pop	r1
 16a:	18 95       	reti

Disassembly of section .text.__vector_2:

00000250 <__vector_2>:

ISR(INT1_vect){
 250:	1f 92       	push	r1
 252:	0f 92       	push	r0
 254:	0f b6       	in	r0, 0x3f	; 63
 256:	0f 92       	push	r0
 258:	11 24       	eor	r1, r1
	TCCR0 = 0;										// Turn down 100ms Timer
 25a:	13 be       	out	0x33, r1	; 51
	TCCR1A = 0;										// Stop PWM
 25c:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0;
 25e:	1e bc       	out	0x2e, r1	; 46
	TCCR2 = 0;
 260:	15 bc       	out	0x25, r1	; 37
}
 262:	0f 90       	pop	r0
 264:	0f be       	out	0x3f, r0	; 63
 266:	0f 90       	pop	r0
 268:	1f 90       	pop	r1
 26a:	18 95       	reti

Disassembly of section .text.__vector_3:

0000016c <__vector_3>:

ISR(TIMER2_COMP_vect){
 16c:	1f 92       	push	r1
 16e:	0f 92       	push	r0
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	0f 92       	push	r0
 174:	11 24       	eor	r1, r1
 176:	8f 93       	push	r24
 178:	9f 93       	push	r25
 17a:	ef 93       	push	r30
 17c:	ff 93       	push	r31
	selector = codigo_barrido & 0xF0;				// 0-Mask to 4 LSB
 17e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <codigo_barrido>
 182:	80 7f       	andi	r24, 0xF0	; 240
 184:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	PORTC = selector + valores[i++];				//selector + value to 7 segments
 188:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <i>
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	9e 0f       	add	r25, r30
 190:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <i>
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	ef 59       	subi	r30, 0x9F	; 159
 198:	ff 4f       	sbci	r31, 0xFF	; 255
 19a:	90 81       	ld	r25, Z
 19c:	89 0f       	add	r24, r25
 19e:	85 bb       	out	0x15, r24	; 21
	codigo_barrido = (codigo_barrido << 1);			//shift left (next digit)
 1a0:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <codigo_barrido>
 1a4:	88 0f       	add	r24, r24
 1a6:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <codigo_barrido>
	if(i == 4){
 1aa:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <i>
 1ae:	84 30       	cpi	r24, 0x04	; 4
 1b0:	29 f4       	brne	.+10     	; 0x1bc <__vector_3+0x50>
		i = 0;
 1b2:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <i>
		codigo_barrido = 0b11101111;
 1b6:	8f ee       	ldi	r24, 0xEF	; 239
 1b8:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <codigo_barrido>
	}
 1bc:	ff 91       	pop	r31
 1be:	ef 91       	pop	r30
 1c0:	9f 91       	pop	r25
 1c2:	8f 91       	pop	r24
 1c4:	0f 90       	pop	r0
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	0f 90       	pop	r0
 1ca:	1f 90       	pop	r1
 1cc:	18 95       	reti
