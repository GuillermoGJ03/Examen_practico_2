
examen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c0  00000000  00000000  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000377  2**0
                  ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000377  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000377  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000003a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000092c  00000000  00000000  000003e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a4  00000000  00000000  00000d12  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032c  00000000  00000000  000012b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d4  00000000  00000000  000015e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001af  00000000  00000000  000016b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001a0  00000000  00000000  00001867  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001a07  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000027e  0000027e  00000372  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001a38  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    0000002c  00000236  00000236  0000032a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_1 00000060  000001d6  000001d6  000002ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_19 000000b2  000000c2  000000c2  000001b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__vector_2 0000001c  00000262  00000262  00000356  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__vector_3 00000062  00000174  00000174  00000268  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .progmemx.data.temperatura 00000001  000000c0  000000c0  000001b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 20 .bss.valores  00000003  00800062  00800062  00000377  2**0
                  ALLOC
 21 .bss.count_int 00000001  00800065  00800065  00000377  2**0
                  ALLOC
 22 .bss.count    00000001  00800066  00800066  00000377  2**0
                  ALLOC
 23 .data.f_read  00000001  00800067  000000c1  000001b5  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 24 .bss.i        00000001  00800068  00800068  00000377  2**0
                  ALLOC
 25 .data.codigo_barrido 00000001  00800069  00000282  00000376  2**0
                  CONTENTS, ALLOC, LOAD, DATA

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__vector_1>
   8:	0c 94 31 01 	jmp	0x262	; 0x262 <__vector_2>
   c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__vector_3>
  10:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  14:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  18:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  1c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  20:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  24:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  28:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  2c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  30:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  34:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  38:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  3c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  40:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  44:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  48:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  4c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_19>
  50:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 67       	ori	r16, 0x70	; 112
  58:	80 00       	.word	0x0080	; ????
  5a:	67 00       	.word	0x0067	; ????
  5c:	68 00       	.word	0x0068	; ????
  5e:	00 c1       	rjmp	.+512    	; 0x260 <main+0x2a>
  60:	00 68       	ori	r16, 0x80	; 128
  62:	00 69       	ori	r16, 0x90	; 144
  64:	80 00       	.word	0x0080	; ????
  66:	69 00       	.word	0x0069	; ????
  68:	6a 00       	.word	0x006a	; ????
  6a:	02 82       	std	Z+2, r0	; 0x02

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf e5       	ldi	r28, 0x5F	; 95
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
  78:	e4 e5       	ldi	r30, 0x54	; 84
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	40 e0       	ldi	r20, 0x00	; 0
  7e:	17 c0       	rjmp	.+46     	; 0xae <__do_clear_bss+0x8>
  80:	b5 91       	lpm	r27, Z+
  82:	a5 91       	lpm	r26, Z+
  84:	35 91       	lpm	r19, Z+
  86:	25 91       	lpm	r18, Z+
  88:	05 91       	lpm	r16, Z+
  8a:	07 fd       	sbrc	r16, 7
  8c:	0c c0       	rjmp	.+24     	; 0xa6 <__do_clear_bss>
  8e:	95 91       	lpm	r25, Z+
  90:	85 91       	lpm	r24, Z+
  92:	ef 01       	movw	r28, r30
  94:	f9 2f       	mov	r31, r25
  96:	e8 2f       	mov	r30, r24
  98:	05 90       	lpm	r0, Z+
  9a:	0d 92       	st	X+, r0
  9c:	a2 17       	cp	r26, r18
  9e:	b3 07       	cpc	r27, r19
  a0:	d9 f7       	brne	.-10     	; 0x98 <__do_copy_data+0x20>
  a2:	fe 01       	movw	r30, r28
  a4:	04 c0       	rjmp	.+8      	; 0xae <__do_clear_bss+0x8>

000000a6 <__do_clear_bss>:
  a6:	1d 92       	st	X+, r1
  a8:	a2 17       	cp	r26, r18
  aa:	b3 07       	cpc	r27, r19
  ac:	e1 f7       	brne	.-8      	; 0xa6 <__do_clear_bss>
  ae:	ec 36       	cpi	r30, 0x6C	; 108
  b0:	f4 07       	cpc	r31, r20
  b2:	31 f7       	brne	.-52     	; 0x80 <__do_copy_data+0x8>
  b4:	0e 94 1b 01 	call	0x236	; 0x236 <main>
  b8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_exit>

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>

Disassembly of section .text:

0000027e <__bad_interrupt>:
 27e:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

00000236 <main>:
ISR(TIMER0_COMP_vect);						// RFID read (TIMER0)
ISR(TIMER2_COMP_vect);						// 7 segment display (TIMER2)

int main(void){
	/*------ Port set up ------*/
	DDRD |= (0 << PD2);						// Switch pin
 236:	81 b3       	in	r24, 0x11	; 17
 238:	81 bb       	out	0x11, r24	; 17
	DDRD |= (0 << PD3);						// Optical sensor pin
 23a:	81 b3       	in	r24, 0x11	; 17
 23c:	81 bb       	out	0x11, r24	; 17
	DDRA = 0b00000000;						// RFID pin
 23e:	1a ba       	out	0x1a, r1	; 26

	DDRD |= (1 << PD4);						// Heater port (PWM = 0C1B)
 240:	81 b3       	in	r24, 0x11	; 17
 242:	80 61       	ori	r24, 0x10	; 16
 244:	81 bb       	out	0x11, r24	; 17
	DDRB |= (1 << PB0);						// Electro valve port
 246:	87 b3       	in	r24, 0x17	; 23
 248:	81 60       	ori	r24, 0x01	; 1
 24a:	87 bb       	out	0x17, r24	; 23
	DDRC |= 0b11111111;						// 7 segments display port
 24c:	84 b3       	in	r24, 0x14	; 20
 24e:	8f ef       	ldi	r24, 0xFF	; 255
 250:	84 bb       	out	0x14, r24	; 20

	/*------ Control word ------*/
	// External interrupts
	GICR = (1 << INT0) | (1 << INT1);
 252:	80 ec       	ldi	r24, 0xC0	; 192
 254:	8b bf       	out	0x3b, r24	; 59
	MCUCR = (1 << ISC00) | (1 << ISC11);
 256:	89 e0       	ldi	r24, 0x09	; 9
 258:	85 bf       	out	0x35, r24	; 53

	// Timers interrupts
	TIMSK = (1 << OCIE0) | (1 << OCIE2);
 25a:	82 e8       	ldi	r24, 0x82	; 130
 25c:	89 bf       	out	0x39, r24	; 57

	sei();
 25e:	78 94       	sei
 260:	ff cf       	rjmp	.-2      	; 0x260 <main+0x2a>

Disassembly of section .text.__vector_1:

000001d6 <__vector_1>:

	while(1);
	return 0;
}

ISR(INT0_vect){
 1d6:	1f 92       	push	r1
 1d8:	0f 92       	push	r0
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	0f 92       	push	r0
 1de:	11 24       	eor	r1, r1
 1e0:	8f 93       	push	r24
 1e2:	9f 93       	push	r25
	if(f_read == 1){
 1e4:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <f_read>
 1e8:	81 30       	cpi	r24, 0x01	; 1
 1ea:	b9 f4       	brne	.+46     	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>
		OCR0 = 196;
 1ec:	84 ec       	ldi	r24, 0xC4	; 196
 1ee:	8c bf       	out	0x3c, r24	; 60
		TCCR0 = (1 << WGM01) | (1 << CS02) | (1 << CS00);						//Initialize 25ms Timer
 1f0:	8d e0       	ldi	r24, 0x0D	; 13
 1f2:	83 bf       	out	0x33, r24	; 51

		OCR1A = 781;
 1f4:	8d e0       	ldi	r24, 0x0D	; 13
 1f6:	93 e0       	ldi	r25, 0x03	; 3
 1f8:	9b bd       	out	0x2b, r25	; 43
 1fa:	8a bd       	out	0x2a, r24	; 42
		OCR1B = 0;
 1fc:	19 bc       	out	0x29, r1	; 41
 1fe:	18 bc       	out	0x28, r1	; 40
		TCCR1A |= (1 << COM1B1) | (1 << WGM11) |(1 << WGM10);					//Initialize PWM
 200:	8f b5       	in	r24, 0x2f	; 47
 202:	83 62       	ori	r24, 0x23	; 35
 204:	8f bd       	out	0x2f, r24	; 47
		TCCR1B |= (1 << WGM13) | (1 << WGM12) | (1 << CS12) | (1 << CS10);						//Initialize PWM
 206:	8e b5       	in	r24, 0x2e	; 46
 208:	8d 61       	ori	r24, 0x1D	; 29
 20a:	8e bd       	out	0x2e, r24	; 46

		OCR2 = 39;
 20c:	87 e2       	ldi	r24, 0x27	; 39
 20e:	83 bd       	out	0x23, r24	; 35
		TCCR2 = (1 << WGM21) | (1 << CS22) | (1 << CS21) | (1 << CS20);
 210:	8f e0       	ldi	r24, 0x0F	; 15
 212:	85 bd       	out	0x25, r24	; 37
		f_read = 0;
 214:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <f_read>
 218:	07 c0       	rjmp	.+14     	; 0x228 <__EEPROM_REGION_LENGTH__+0x28>
		} else{
		TCCR0 = 0;								// Turn off 100ms Timer
 21a:	13 be       	out	0x33, r1	; 51

		TCCR1A = 0;								// Stop PWM
 21c:	1f bc       	out	0x2f, r1	; 47
		TCCR1B = 0;								// Stop PWM
 21e:	1e bc       	out	0x2e, r1	; 46

		TCCR2 = 0;
 220:	15 bc       	out	0x25, r1	; 37
		f_read = 1;
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <f_read>
	}
}
 228:	9f 91       	pop	r25
 22a:	8f 91       	pop	r24
 22c:	0f 90       	pop	r0
 22e:	0f be       	out	0x3f, r0	; 63
 230:	0f 90       	pop	r0
 232:	1f 90       	pop	r1
 234:	18 95       	reti

Disassembly of section .text.__vector_19:

000000c2 <__vector_19>:

ISR(TIMER0_COMP_vect){
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	2f 93       	push	r18
  ce:	3f 93       	push	r19
  d0:	4f 93       	push	r20
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
  d6:	ef 93       	push	r30
  d8:	ff 93       	push	r31
	if(count_int == 3){
  da:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <count_int>
  de:	83 30       	cpi	r24, 0x03	; 3
  e0:	d1 f5       	brne	.+116    	; 0x156 <__vector_19+0x94>
		count_int = 0;
  e2:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <count_int>
		valores[count] = PINA;
  e6:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <count>
  ea:	e8 2f       	mov	r30, r24
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	99 b3       	in	r25, 0x19	; 25
  f0:	ee 59       	subi	r30, 0x9E	; 158
  f2:	ff 4f       	sbci	r31, 0xFF	; 255
  f4:	90 83       	st	Z, r25
		if(count == 0){
  f6:	81 11       	cpse	r24, r1
  f8:	04 c0       	rjmp	.+8      	; 0x102 <__vector_19+0x40>
			count++;
  fa:	8f 5f       	subi	r24, 0xFF	; 255
  fc:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <count>
 100:	2d c0       	rjmp	.+90     	; 0x15c <__vector_19+0x9a>
		} else if(count == 1){
 102:	81 30       	cpi	r24, 0x01	; 1
 104:	d1 f4       	brne	.+52     	; 0x13a <__vector_19+0x78>
			temp = pgm_read_byte(&temperatura[0]);
 106:	20 ec       	ldi	r18, 0xC0	; 192
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	40 e0       	ldi	r20, 0x00	; 0
 10c:	f9 01       	movw	r30, r18
 10e:	24 91       	lpm	r18, Z
 110:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>
			if(valores[count] < temp){
 114:	92 17       	cp	r25, r18
 116:	28 f4       	brcc	.+10     	; 0x122 <__vector_19+0x60>
				OCR1B = 586;							// 75% PWM
 118:	8a e4       	ldi	r24, 0x4A	; 74
 11a:	92 e0       	ldi	r25, 0x02	; 2
 11c:	99 bd       	out	0x29, r25	; 41
 11e:	88 bd       	out	0x28, r24	; 40
 120:	06 c0       	rjmp	.+12     	; 0x12e <__vector_19+0x6c>
			} else if (valores[count] >= temp){
 122:	92 17       	cp	r25, r18
 124:	20 f0       	brcs	.+8      	; 0x12e <__vector_19+0x6c>
				OCR1B = 195;							// 25% PWM
 126:	83 ec       	ldi	r24, 0xC3	; 195
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	99 bd       	out	0x29, r25	; 41
 12c:	88 bd       	out	0x28, r24	; 40
			}
			count++;
 12e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <count>
 132:	8f 5f       	subi	r24, 0xFF	; 255
 134:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <count>
 138:	11 c0       	rjmp	.+34     	; 0x15c <__vector_19+0x9a>
		} else if(count == 2){
 13a:	82 30       	cpi	r24, 0x02	; 2
 13c:	79 f4       	brne	.+30     	; 0x15c <__vector_19+0x9a>
			if(valores[count] < 3){
 13e:	93 30       	cpi	r25, 0x03	; 3
 140:	20 f4       	brcc	.+8      	; 0x14a <__vector_19+0x88>
				PORTB |= (1 << PB0);
 142:	88 b3       	in	r24, 0x18	; 24
 144:	81 60       	ori	r24, 0x01	; 1
 146:	88 bb       	out	0x18, r24	; 24
 148:	03 c0       	rjmp	.+6      	; 0x150 <__vector_19+0x8e>
			} else{
				PORTB &= ~(1 << PB0);
 14a:	88 b3       	in	r24, 0x18	; 24
 14c:	8e 7f       	andi	r24, 0xFE	; 254
 14e:	88 bb       	out	0x18, r24	; 24
			}
			count = 0;
 150:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <count>
 154:	03 c0       	rjmp	.+6      	; 0x15c <__vector_19+0x9a>
		}
	} else{
		count_int++;
 156:	8f 5f       	subi	r24, 0xFF	; 255
 158:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <count_int>
	}
}
 15c:	ff 91       	pop	r31
 15e:	ef 91       	pop	r30
 160:	9f 91       	pop	r25
 162:	8f 91       	pop	r24
 164:	4f 91       	pop	r20
 166:	3f 91       	pop	r19
 168:	2f 91       	pop	r18
 16a:	0f 90       	pop	r0
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	0f 90       	pop	r0
 170:	1f 90       	pop	r1
 172:	18 95       	reti

Disassembly of section .text.__vector_2:

00000262 <__vector_2>:

ISR(INT1_vect){
 262:	1f 92       	push	r1
 264:	0f 92       	push	r0
 266:	0f b6       	in	r0, 0x3f	; 63
 268:	0f 92       	push	r0
 26a:	11 24       	eor	r1, r1
	TCCR0 = 0;										// Turn down 100ms Timer
 26c:	13 be       	out	0x33, r1	; 51
	TCCR1A = 0;										// Stop PWM
 26e:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0;
 270:	1e bc       	out	0x2e, r1	; 46
	TCCR2 = 0;
 272:	15 bc       	out	0x25, r1	; 37
}
 274:	0f 90       	pop	r0
 276:	0f be       	out	0x3f, r0	; 63
 278:	0f 90       	pop	r0
 27a:	1f 90       	pop	r1
 27c:	18 95       	reti

Disassembly of section .text.__vector_3:

00000174 <__vector_3>:

ISR(TIMER2_COMP_vect){
 174:	1f 92       	push	r1
 176:	0f 92       	push	r0
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	0f 92       	push	r0
 17c:	11 24       	eor	r1, r1
 17e:	8f 93       	push	r24
 180:	9f 93       	push	r25
 182:	ef 93       	push	r30
 184:	ff 93       	push	r31
	selector = codigo_barrido & 0xF0;				// 0-Mask to 4 LSB
 186:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <codigo_barrido>
 18a:	80 7f       	andi	r24, 0xF0	; 240
 18c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <selector>
	PORTC = selector + valores[i++];				// Selector + value to 7 segments
 190:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <i>
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	9e 0f       	add	r25, r30
 198:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <i>
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	ee 59       	subi	r30, 0x9E	; 158
 1a0:	ff 4f       	sbci	r31, 0xFF	; 255
 1a2:	90 81       	ld	r25, Z
 1a4:	89 0f       	add	r24, r25
 1a6:	85 bb       	out	0x15, r24	; 21
	codigo_barrido = (codigo_barrido << 1);			// Shift left (next digit)
 1a8:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <codigo_barrido>
 1ac:	88 0f       	add	r24, r24
 1ae:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <codigo_barrido>
	if(i > 2){
 1b2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <i>
 1b6:	83 30       	cpi	r24, 0x03	; 3
 1b8:	28 f0       	brcs	.+10     	; 0x1c4 <__vector_3+0x50>
		i = 0;
 1ba:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <i>
		codigo_barrido = 0b11011111;
 1be:	8f ed       	ldi	r24, 0xDF	; 223
 1c0:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <codigo_barrido>
	}
}
 1c4:	ff 91       	pop	r31
 1c6:	ef 91       	pop	r30
 1c8:	9f 91       	pop	r25
 1ca:	8f 91       	pop	r24
 1cc:	0f 90       	pop	r0
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	0f 90       	pop	r0
 1d2:	1f 90       	pop	r1
 1d4:	18 95       	reti
